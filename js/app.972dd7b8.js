(function(){"use strict";var t={9632:function(t,e,r){var n=r(6369),a=function(){var t=this,e=t._self._c;return e("v-app",[e("v-app-bar",{attrs:{app:""}},[e("v-toolbar-title",[t._v('Яманко ДИ Практика. Тема: "Сравнительный анализ JavaScript фреймворков для разработки мобильных приложений"')]),e("v-spacer"),e("v-btn",{attrs:{text:"",to:"/"}},[t._v("Глоссарий")]),e("v-btn",{attrs:{text:"",to:"/semantic-graph"}},[t._v("Семантический граф")])],1),e("v-main",{staticClass:"gray-background"},[e("v-container",[e("router-view")],1)],1)],1)},i=[],o={name:"App"},c=o,s=r(1001),u=(0,s.Z)(c,a,i,!1,null,null,null),p=u.exports,l=r(2631),d=function(){var t=this,e=t._self._c;return e("div",[e("v-row",t._l(t.glossary,(function(r){return e("v-col",{key:r.id,attrs:{cols:"12",sm:"6",md:"4"}},[e("v-card",{staticClass:"my-card"},[e("v-card-title",[t._v(t._s(r.name))]),e("v-card-text",[t._v(t._s(r.description))])],1)],1)})),1)],1)},y=[],f=JSON.parse('{"T":[{"id":"1","name":"Мобильное приложение","description":"Мобильное приложение — это программное обеспечение, разработанное для работы на мобильных устройствах, таких как смартфоны и планшеты. Они обеспечивают пользователям удобный доступ к широкому спектру функций, включая электронную почту, медиа-плееры, GPS и другие утилиты. Мобильные приложения часто разрабатываются с учетом конкретных особенностей операционной системы устройства.","x":-271,"y":-201},{"id":"2","name":"Нативное приложение","description":"Нативное приложение — это программное обеспечение, созданное специально для работы на определенной платформе или операционной системе, например, iOS или Android. Оно написано на языке программирования, поддерживаемом конкретной платформой, и может полностью использовать все возможности устройства, такие как камера, GPS, ускоренный графический процессор и т.д.","x":-468,"y":-47},{"id":"3","name":"Кроссплатформенное приложение","description":"Кроссплатформенное приложение — это тип мобильного приложения, разработанного таким образом, чтобы быть совместимым с несколькими операционными системами. Такие приложения пишутся на универсальных языках программирования и фреймворках, что позволяет их запускать на различных устройствах без необходимости переписывания кода под каждую систему.","x":-316,"y":202},{"id":"4","name":"JavaScript","description":"JavaScript — это мощный язык программирования, используемый для создания интерактивных и динамических веб-страниц. В контексте мобильных приложений, JavaScript часто используется в сочетании с HTML и CSS для разработки кроссплатформенных и гибридных приложений. Этот язык позволяет разработчикам создавать сложные пользовательские интерфейсы и логику работы приложения.","x":34,"y":78},{"id":"5","name":"Фреймворк","description":"Фреймворк в контексте разработки программного обеспечения — это набор инструментов, библиотек и руководств, которые облегчают процесс разработки. Он предоставляет стандартизированную основу для разработки и структурирования программного кода, что существенно ускоряет и упрощает разработку сложных приложений.","x":292,"y":93},{"id":"6","name":"React Native","description":"React Native — это популярный фреймворк, созданный Facebook для разработки нативных мобильных приложений, используя JavaScript. Он позволяет разработчикам использовать React, библиотеку для построения пользовательских интерфейсов, в сочетании с нативными платформенными возможностями, что обеспечивает высокую производительность и естественное чувство приложения.","x":550,"y":79},{"id":"7","name":"NativeScript","description":"NativeScript — это фреймворк для создания нативных мобильных приложений на JavaScript. Он позволяет разработчикам писать код на JavaScript, который затем преобразуется в нативный код, обеспечивая доступ к нативным API и возможностям устройства, таким как камера, микрофон и уведомления.","x":73,"y":229},{"id":"8","name":"Ionic","description":"Ionic — это фреймворк для разработки гибридных мобильных приложений. Он позволяет использовать веб-технологии, такие как HTML, CSS и JavaScript, для создания приложений, которые могут быть установлены как нативные приложения на различных платформах. Ionic обеспечивает богатый набор готовых к использованию компонентов интерфейса и интеграцию с различными платформенными возможностями.","x":254,"y":-91},{"id":"9","name":"Нативные функции","description":"Нативные функции относятся к специфическим возможностям и функциям, предоставляемым операционной системой мобильного устройства. Это включает в себя доступ к аппаратным компонентам, таким как камера, GPS, датчики движения, а также использование нативных возможностей для улучшения производительности и пользовательского опыта.","x":-521,"y":-189},{"id":"10","name":"Платформа","description":"В контексте мобильных приложений платформа обозначает операционную систему, на которой работает мобильное устройство, например, Android или iOS. От выбора платформы зависит не только выбор инструментов для разработки, но и доступные API, пользовательский опыт и функциональность приложения.","x":-601,"y":65},{"id":"11","name":"Гибридное приложение","description":"Гибридное приложение — это тип мобильного приложения, сочетающий в себе элементы нативных и веб-технологий. Оно часто разрабатывается с использованием HTML, CSS и JavaScript и упаковывается в нативный контейнер, что позволяет ему работать на различных платформах и иметь доступ к нативным функциям устройства.","x":-134,"y":-53},{"id":"12","name":"WebView","description":"WebView — это компонент, который позволяет в мобильных приложениях отображать веб-страницы и веб-контент. Он действует как браузер внутри приложения, позволяя ему загружать и отображать веб-контент. Это особенно полезно в гибридных приложениях, где большая часть контента поставляется в форме веб-страниц.","x":32,"y":-204},{"id":"14","name":"JavaScript bridge","description":"JavaScript bridge в контексте мобильных приложений относится к механизму, который позволяет JavaScript взаимодействовать с нативным кодом приложения. Это ключевой компонент в гибридных и кроссплатформенных приложениях, так как он обеспечивает возможность использования нативных функций устройства прямо из JavaScript.","x":-681,"y":-446},{"id":"15","name":"API устройства","description":"API (Application Programming Interface) устройства — это набор функций и процедур, который позволяет мобильным приложениям взаимодействовать с операционной системой и другим программным обеспечением на устройстве. Эти интерфейсы обеспечивают доступ к таким функциям, как камера, геолокация, датчики движения и многому другому.","x":-629,"y":-306},{"id":"16","name":"Angular","description":"Angular — это мощный фреймворк, разработанный Google для создания веб-приложений. Он часто используется в сочетании с Ionic для разработки гибридных мобильных приложений. Angular обеспечивает эффективное управление данными и интерфейсом пользователя, а также поддерживает различные инструменты и библиотеки для повышения производительности разработки.","x":267,"y":-275},{"id":"17","name":"TypeScript","description":"TypeScript — это язык программирования, разработанный Microsoft, который расширяет JavaScript, добавляя строгую типизацию и объектно-ориентированные возможности. Он часто используется в современной веб-разработке, включая фреймворки, такие как Angular и Ionic, для повышения читаемости кода, улучшения поддержки и облегчения масштабирования проектов.","x":307,"y":-402}],"Q":[{"source":"1","target":"2","type":"Включает"},{"source":"1","target":"3","type":"Включает"},{"source":"3","target":"4","type":"Использует"},{"source":"4","target":"5","type":"Использует"},{"source":"5","target":"6","type":"Пример"},{"source":"5","target":"7","type":"Пример"},{"source":"5","target":"8","type":"Пример"},{"source":"2","target":"9","type":"Использует"},{"source":"2","target":"10","type":"Требует"},{"source":"3","target":"11","type":"Пример"},{"source":"11","target":"12","type":"Использует"},{"source":"15","target":"14","type":"Вызывает"},{"source":"9","target":"15","type":"Использует"},{"source":"8","target":"16","type":"Интегрирует"},{"source":"16","target":"17","type":"Использует"},{"source":"8","target":"12","type":"Использует"}]}'),v={getGlossaryTerms(){return f.T},getSemanticGraphData(){return f.Q}},g={name:"GlossaryList",data(){return{glossary:[]}},created(){this.glossary=v.getGlossaryTerms()}},m=g,S=(0,s.Z)(m,d,y,!1,null,null,null),b=S.exports,h=function(){var t=this,e=t._self._c;return e("div",{ref:"mindMap",staticClass:"mind-map"})},x=[],w=r(290),_={data(){return{network:null}},mounted(){this.createNetwork()},methods:{createNetwork(){const t=this.$refs.mindMap,e=v.getGlossaryTerms(),r=v.getSemanticGraphData(),n=e.map((t=>({id:t.id,label:t.name,x:t.x,y:t.y,physics:!1,margin:{top:20,right:20,bottom:20,left:20}}))),a=r.map((t=>({from:t.source,to:t.target,label:t.type}))),i={nodes:{color:{border:"gray",background:"white"},font:{color:"gray",size:20},shape:"box"},edges:{color:"gray",arrows:"to",font:{color:"black",size:20}}};this.network=new w.Network(t,{nodes:n,edges:a},i)}}},O=_,k=(0,s.Z)(O,h,x,!1,null,null,null),J=k.exports;n["default"].use(l.ZP);var P=new l.ZP({mode:"history",base:"/",routes:[{path:"/",name:"Glossary",component:b},{path:"/semantic-graph",name:"SemanticGraph",component:J}]}),T=r(707),A=r.n(T);r(8556);n["default"].use(A()),new n["default"]({router:P,vuetify:new(A()),render:t=>t(p)}).$mount("#app")}},e={};function r(n){var a=e[n];if(void 0!==a)return a.exports;var i=e[n]={exports:{}};return t[n].call(i.exports,i,i.exports,r),i.exports}r.m=t,function(){var t=[];r.O=function(e,n,a,i){if(!n){var o=1/0;for(p=0;p<t.length;p++){n=t[p][0],a=t[p][1],i=t[p][2];for(var c=!0,s=0;s<n.length;s++)(!1&i||o>=i)&&Object.keys(r.O).every((function(t){return r.O[t](n[s])}))?n.splice(s--,1):(c=!1,i<o&&(o=i));if(c){t.splice(p--,1);var u=a();void 0!==u&&(e=u)}}return e}i=i||0;for(var p=t.length;p>0&&t[p-1][2]>i;p--)t[p]=t[p-1];t[p]=[n,a,i]}}(),function(){r.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return r.d(e,{a:e}),e}}(),function(){r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})}}(),function(){r.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"===typeof window)return window}}()}(),function(){r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)}}(),function(){r.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}}(),function(){var t={143:0};r.O.j=function(e){return 0===t[e]};var e=function(e,n){var a,i,o=n[0],c=n[1],s=n[2],u=0;if(o.some((function(e){return 0!==t[e]}))){for(a in c)r.o(c,a)&&(r.m[a]=c[a]);if(s)var p=s(r)}for(e&&e(n);u<o.length;u++)i=o[u],r.o(t,i)&&t[i]&&t[i][0](),t[i]=0;return r.O(p)},n=self["webpackChunkpractice"]=self["webpackChunkpractice"]||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))}();var n=r.O(void 0,[998],(function(){return r(9632)}));n=r.O(n)})();
//# sourceMappingURL=app.972dd7b8.js.map