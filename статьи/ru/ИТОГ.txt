2.1.1 Анализ статьи «Выбор и обоснование использования современных средств для разработки мультиплатформенных мобильных приложений»
Название: «Выбор и обоснование использования современных средств для разработки мультиплатформенных мобильных приложений»
Авторы: Е. В. ЗОТОВ, Е. С. ЗАНИНА
**Содержание статьи:**
Статья, написанная Е.В. Зотовым и Е.С. Заниной, опубликованная в "Матрице научного познания" №4/2019, посвящена современным методам разработки мультиплатформенных приложений с использованием одного языка программирования и общей кодовой базы. Авторы акцентируют внимание на преимуществах использования JavaScript платформы React Native для разработки мобильных приложений, которая позволяет уменьшить цену разработки и обеспечивает простоту поддержки нескольких платформ. В статье освещаются основные концепции React, включая компонентный подход, односторонний поток данных, виртуальную объектную модель документа и синтаксис JSX.

**Критерии сравнения и оценки фреймворков:**

Статья не предоставляет явного списка критериев для сравнения и оценки фреймворков. Однако, на основе анализа текста, можно выделить следующие критерии, которые авторы, вероятно, считают важными:

1. **Мультиплатформенность:** Возможность использования одного языка программирования и общей кодовой базы для разработки приложений для разных платформ.
2. **Комфорт разработки:** Удобство использования фреймворка для разработчика, включая возможность разработки приложений для iOS на операционной системе Windows.
3. **Производительность:** Эффективность использования ресурсов и скорость работы приложений, созданных с использованием фреймворка.
4. **Переиспользование кода:** Возможность использования одного и того же кода для разных платформ и перехода с разработки веб-приложений к разработке мобильных приложений и наоборот.

**Оценка списка критериев:**

Представленный список критериев является весьма общим и не покрывает все аспекты, которые могут быть важны при выборе фреймворка для разработки мобильных приложений. В частности, отсутствуют такие важные критерии, как поддержка сообщества, наличие документации, уровень сложности обучения, гибкость и масштабируемость фреймворка. Кроме того, не учитываются специфические требования к прилож

ению, такие как необходимость в нативных функциях, требования к безопасности и приватности данных, а также специфика целевой аудитории и рынка. 

Таким образом, для более полного и объективного сравнения фреймворков для разработки мобильных приложений на JavaScript, рекомендуется расширить список критериев, учитывая вышеупомянутые аспекты.
--------------------------------------------------------------------------------------------------
2.1.2 Анализ статьи «Мобильные среды веб-разработки для мобильных приложений»

Название: «Мобильные среды веб-разработки для мобильных приложений»
Авторы: А. С. СОРОКА, Т. В. ЗАВАДСКА
**Содержание статьи:**
Статья "Мобильные среды веб-разработки для мобильных приложений" авторов Сорока Антон Сергеевич и Завадская Татьяна Владимировна посвящена анализу современных мобильных сред веб-разработки. Основное внимание уделено сравнительному анализу таких сред разработки, как React Native и Apache Cordova, с точки зрения их применения для реализации конкретных задач. Авторы обсуждают преимущества и недостатки каждого из этих фреймворков, а также их подходы к кроссплатформенности и использованию нативных приложений.

Критерии сравнения и оценки фреймворков в статье:

1. Простота изучения: Оценивается уровень сложности освоения фреймворка для новых разработчиков.

2. Кроссплатформенность: Оценивается способность фреймворка работать на различных платформах и операционных системах.

3. Нативность: Оценивается способность фреймворка создавать приложения, оптимизированные под конкретные операционные системы.

4. Производительность: Оценивается скорость работы приложений, созданных с использованием фреймворка.

5. Доступ к нативному функционалу: Оценивается возможность фреймворка взаимодействовать с нативными функциями устройства, такими как камера, динамики, кнопки и т.д.

6. Быстрый цикл разработки: Оценивается скорость и эффективность процесса разработки при использовании фреймворка.

Оценка списка критериев:

Список критериев, представленный в статье, является достаточно полным и охватывает основные аспекты, которые важны при выборе фреймворка для разработки мобильных приложений. Однако, возможно, стоит добавить такие критерии, как поддержка и активность сообщества разработчиков, наличие документации и обучающих материалов, а также уровень поддержки последних технологий и стандартов веб-разработки.
--------------------------------------------------------------------------------------------------
2.1.3 Анализ статьи «Кроссплатформенная разработка на базе веб-технологий для поддержки решений в проблемно ориентированных системах управления»

Название: «Кроссплатформенная разработка на базе веб-технологий для поддержки решений в проблемно ориентированных системах управления»
Авторы: А. Ю. ПЧЕЛКИН, Н. Ф. ГУСАРОВА
**Содержание статьи:**

Статья представляет собой сравнительный анализ трех популярных JavaScript-фреймворков для разработки мобильных приложений: React Native, Ionic и Native Script. Авторы исследуют каждый из этих фреймворков, оценивая их по ряду критериев, чтобы определить их преимущества и недостатки.

Критерии оценки:

1. **Производительность**: Оценка скорости работы приложения, созданного на основе каждого фреймворка.

2. **Поддержка платформ**: Оценка способности фреймворка поддерживать различные мобильные платформы (iOS, Android и т.д.).

3. **Сообщество и поддержка**: Оценка размера и активности сообщества разработчиков, а также доступности и качества документации.

4. **Удобство использования**: Оценка простоты и удобства использования фреймворка для разработчиков.

5. **Гибкость и масштабируемость**: Оценка способности фреймворка адаптироваться к изменениям и расти вместе с проектом.

Оценка списка критериев:

Список критериев, представленный в статье, является достаточно полным и охватывает большинство ключевых аспектов, которые следует учитывать при выборе фреймворка для разработки мобильных приложений. Однако, возможно, стоит добавить критерий "Совместимость с другими технологиями", который бы оценивал способность фреймворка интегрироваться с другими технологиями и библиотеками. Кроме того, критерий "Производительность" может быть расширен до "Производительность и эффективность использования ресурсов", чтобы оценить, как фреймворк использует системные ресурсы мобильного устройства.
--------------------------------------------------------------------------------------------------
2.1.4 Анализ статьи «Сравнение фреймворков Flutter и React Native, используемых в разработке гибридных приложений»
Название: «Сравнение фреймворков Flutter и React Native, используемых в разработке гибридных приложений»
Авторы: С. А. КОЛЧАНОВА 
**Содержание статьи:**

Статья представляет собой сравнительный анализ двух популярных фреймворков для разработки гибридных приложений: Flutter и React Native. Авторы исследуют каждый из этих фреймворков, оценивая их по ряду критериев, чтобы определить их преимущества и недостатки.

Критерии оценки:

1. **Язык**: Оценка основного языка программирования, используемого в фреймворке.

2. **Представление**: Оценка производительности и эффективности рендеринга интерфейса в каждом фреймворке.

3. **API и пользовательский интерфейс**: Оценка наличия и богатства встроенных API и компонентов пользовательского интерфейса.

4. **IDE**: Оценка поддержки различных сред разработки.

5. **Документация**: Оценка доступности и полноты документации.

6. **Развертывание**: Оценка простоты и эффективности процесса развертывания приложений.

Оценка списка критериев:

Список критериев, представленный в статье, является достаточно полным и охватывает большинство ключевых аспектов, которые следует учитывать при выборе фреймворка для разработки гибридных приложений. Однако, возможно, стоит добавить критерий "Сообщество и поддержка", который бы оценивал размер и активность сообщества разработчиков, а также доступность и качество поддержки. Кроме того, критерий "Производительность" может быть расширен до "Производительность и эффективность использования ресурсов", чтобы оценить, как фреймворк использует системные ресурсы мобильного устройства.
--------------------------------------------------------------------------------------------------
2.1.5 Анализ статьи «Сравнительный анализ кроссплатформенных технологий для разработки мобильных приложений»
Название: «Сравнительный анализ кроссплатформенных технологий для разработки мобильных приложений»
Авторы: Д. В. МИШАГИН
**Содержание статьи:**

Статья, представленная на анализ, посвящена сравнительному анализу трех популярных JavaScript-фреймворков для разработки мобильных приложений: React Native, Ionic и Native Script. Авторы исследуют каждый из этих фреймворков, оценивая их по ряду критериев, и представляют свои выводы о преимуществах и недостатках каждого из них.

**Критерии сравнения:**

1. **Производительность:** Оценка скорости работы приложений, созданных на каждом из фреймворков.
2. **Поддержка платформ:** Анализ совместимости фреймворков с различными операционными системами.
3. **Сообщество и поддержка:** Оценка размера и активности сообщества разработчиков, а также доступности и качества документации.
4. **Удобство использования:** Оценка простоты и удобства использования фреймворка для разработчиков.
5. **Гибкость и масштабируемость:** Оценка возможностей для настройки и масштабирования приложений, созданных на каждом из фреймворков.

**Оценка списка критериев:**

Список критериев, представленный в статье, является достаточно полным и покрывает большинство ключевых аспектов, которые должны быть рассмотрены при выборе фреймворка для разработки мобильных приложений. Однако, возможно, стоит добавить еще несколько критериев для более полного анализа. Например, можно было бы рассмотреть **стоимость использования** (бесплатно ли использовать фреймворк или есть ли какие-то скрытые платежи), **возможности тестирования** (какие инструменты для тестирования предлагаются вместе с фреймворком) и **интеграцию с другими технологиями** (насколько легко интегрировать фреймворк с другими технологиями, такими как базы данных, API и т.д.).
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.1.6 Анализ статьи «Инструменты мобильной кроссплатформенной разработки приложений»
Название: «Инструменты мобильной кроссплатформенной разработки приложений»
Авторы: А. В. НЕДЯК, О. Ю. РУДЗЕЙТ, А. Р. ЗАЙНЕТДИНОВ, П. Г. РАГУЛИН 
**Содержание статьи:**

Статья представляет собой обзор и сравнение трех популярных JavaScript-фреймворков для разработки мобильных приложений: React Native, Ionic и NativeScript. Авторы анализируют каждый из этих фреймворков, используя определенный набор критериев, и предоставляют свои выводы о преимуществах и недостатках каждого из них.

**Критерии сравнения и оценки фреймворков:**

1. **Производительность:** Этот критерий оценивает, насколько быстро работает приложение, созданное с использованием каждого из фреймворков.

2. **Поддержка платформ:** Оценивает, насколько хорошо фреймворк поддерживает различные мобильные платформы, такие как Android и iOS.

3. **Сообщество и поддержка:** Оценивает размер и активность сообщества разработчиков, а также доступность и качество документации и ресурсов поддержки.

4. **Удобство использования:** Оценивает, насколько просто начать работу с фреймворком и насколько удобно его использовать для разработки приложений.

5. **Гибкость и масштабируемость:** Оценивает, насколько легко можно настроить и масштабировать приложения, созданные с использованием каждого из фреймворков.

**Краткая оценка списка критериев:**

В целом, список критериев представляет собой сбалансированный набор параметров, позволяющий оценить различные аспекты работы с фреймворками. Однако, возможно, стоит добавить еще несколько критериев для более полного анализа. Например, можно учесть "Совместимость с другими технологиями и библиотеками", "Стоимость и лицензирование" и "Безопасность и устойчивость к ошибкам". Также, критерий "Удобство использования" может быть субъективным и требовать более точных метрик для оценки.
--------------------------------------------------------------------------------------------------
2.1.7 Анализ статьи «Сравнение инструментальных средств для разработки мобильных приложений»
Название: «Сравнение инструментальных средств для разработки мобильных приложений»
Авторы: Е. А. ПОПОВА 
**Содержание статьи:**

Статья Е.А. Поповой представляет сравнительный анализ нативного и кроссплатформенного подходов к разработке мобильных приложений. Основное внимание уделено инструментальным средствам, используемым в этих подходах, включая такие как Eclipse, Netbeans, Visual Studio, IntelliJ IDEA, Sublime Text, Notepad++, Android studio, Apache Cordova, PhoneGap, Xamarin, React Native и Flutter. Автор описывает особенности каждого из этих инструментов и представляет сравнительный анализ их возможностей.

Критерии сравнения и оценки фреймворков:

1. Платформы: Определяет, на каких платформах может работать фреймворк.
2. Языки программирования: Указывает, какие языки программирования поддерживаются.
3. Кроссплатформенность: Указывает, поддерживает ли фреймворк разработку приложений для нескольких платформ.
4. Этапы жизненного цикла: Определяет, на каких этапах жизненного цикла разработки может быть использован фреймворк.
5. Нативные UI элементы: Указывает, поддерживает ли фреймворк использование нативных UI элементов.
6. Доступ к системным ресурсам: Определяет, предоставляет ли фреймворк доступ к системным ресурсам устройства.
7. Дополнительное ПО: Указывает, требуется ли дополнительное программное обеспечение для работы с фреймворком.

Оценка списка критериев:

Список критериев, представленных в статье, является обширным и покрывает большую часть важных аспектов при выборе фреймворка для разработки мобильных приложений. Однако, он может быть дополнен следующими критериями:

1. Производительность: Как быстро работает приложение, созданное с использованием данного фреймворка.
2. Сообщество и поддержка: Насколько активно сообщество разработчиков и насколько хорошо поддерживается фреймворк.
3. Обучение и документация: Насколько хорошо документирован фреймворк и насколько легко его изучить.
4. Совместимость с библиотеками и инструментами: Насколько хорошо фреймворк интегриру

ется с другими библиотеками и инструментами разработки.

Недостатками текущего списка являются отсутствие учета производительности, поддержки сообщества и совместимости с другими инструментами и библиотеками. Эти критерии могут быть важными при выборе
--------------------------------------------------------------------------------------------------
2.1.8 Анализ статьи «ОБЗОР ПОДХОДОВ К СОЗДАНИЮ КРОССПЛАТФОРМЕННЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ С ПРИМЕНЕНИЕМ ВЕБ-ТЕХНОЛОГИЙ»
Название: «ОБЗОР ПОДХОДОВ К СОЗДАНИЮ КРОССПЛАТФОРМЕННЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ С ПРИМЕНЕНИЕМ ВЕБ-ТЕХНОЛОГИЙ »
Авторы: Д. В. СИРОМСКИЙ 
**Содержание статьи:**

Статья Д.В. Сиромского представляет обзор подходов к созданию кроссплатформенных мобильных приложений с использованием веб-технологий. Автор рассматривает особенности и сравнивает такие технологии, как Apache Cordova, React Native, NativeScript и Progressive Web Application (PWA). 

Критерии сравнения и оценки фреймворков:

1. Доступ к функциям устройства: Определяет, предоставляет ли фреймворк доступ к функциям устройства.
2. Поддержка плагинов: Указывает, поддерживает ли фреймворк плагины.
3. Сложность адаптации под разные устройства: Оценивает, насколько легко адаптировать приложение под разные устройства с использованием данного фреймворка.
4. Разметка на собственных компонентах: Оценивает, использует ли фреймворк собственные компоненты для разметки.
5. Поддержка TypeScript: Указывает, поддерживает ли фреймворк TypeScript.
6. Поддержка SEO: Оценивает, поддерживает ли фреймворк SEO.
7. Вес исполняемого файла: Оценивает, какой вес имеет исполняемый файл приложения, созданного с использованием данного фреймворка.

Оценка списка критериев:

Список критериев, представленных в статье, является достаточно полным и покрывает большую часть важных аспектов при выборе фреймворка для разработки мобильных приложений. Однако, он может быть дополнен следующими критериями:

1. Производительность: Как быстро работает приложение, созданное с использованием данного фреймворка.
2. Сообщество и поддержка: Насколько активно сообщество разработчиков и насколько хорошо поддерживается фреймворк.
3. Обучение и документация: Насколько хорошо документирован фреймворк и насколько легко его изучить.

Недостатками текущего списка являются отсутствие учета производительности, поддержки сообщества и качества документации. Эти критерии могут быть важными при выборе фреймворка для разработки мобильных приложений.
--------------------------------------------------------------------------------------------------
2.1.9 Анализ статьи «СОЗДАНИЕ МОБИЛЬНОГО ПРИЛОЖЕНИЯ НА ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JAVASCRIPT (REACT NATIVE) »
Название: «СОЗДАНИЕ МОБИЛЬНОГО ПРИЛОЖЕНИЯ НА ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JAVASCRIPT (REACT NATIVE) »
Авторы: В. Г. ВИНОГРАДСКИЙ, А. В. ВИНОКУРОВ
**Содержание статьи:**

Статья представляет собой сравнительный анализ трех популярных JavaScript-фреймворков для разработки мобильных приложений: React Native, Ionic и NativeScript. Авторы исследуют каждый из этих фреймворков, оценивая их по ряду критериев, чтобы определить их преимущества и недостатки. 

**Критерии сравнения:**

1. **Производительность:** Оценка скорости и эффективности работы приложений, созданных с использованием каждого фреймворка.

2. **Поддержка платформ:** Оценка того, насколько хорошо фреймворк поддерживает различные мобильные платформы, такие как Android и iOS.

3. **Сообщество и поддержка:** Оценка размера и активности сообщества разработчиков, а также доступности и качества документации и ресурсов поддержки.

4. **Удобство использования:** Оценка того, насколько просто и удобно использовать фреймворк для разработки приложений.

5. **Гибкость и масштабируемость:** Оценка того, насколько легко можно настроить и масштабировать приложения, созданные с использованием каждого фреймворка.

**Оценка списка критериев:**

Список критериев, представленный в статье, представляет собой хорошую отправную точку для сравнения JavaScript-фреймворков для разработки мобильных приложений. Однако, он может быть дополнен и уточнен. 

Во-первых, критерий "производительность" может быть разделен на подкритерии, такие как время загрузки приложения, скорость отклика на пользовательские действия и потребление ресурсов (CPU, память).

Во-вторых, критерий "поддержка платформ" может быть расширен, чтобы включать в себя не только поддержку Android и iOS, но и других платформ, таких как Windows и web.

В-третьих, может быть добавлен критерий "стоимость разработки", который оценивает время и ресурсы, необходимые для разработки приложения с использованием каждого фреймворка.

Наконец, критерий "гибкость и масштабируемость" может быть уточнен, чтобы оценивать способность фреймворка поддерж

ивать изменения в требованиях и рост приложения.

В целом, хотя список критериев в статье является полезным, он может быть улучшен путем добавления большей детализации и учета дополнительных аспектов разработки мобильных приложений.
--------------------------------------------------------------------------------------------------
2.1.10 Анализ статьи «Выбор платформы ля разработки мобильного нативного клиентского приложения для портальных решений телеком-операторов»
Название: «Выбор платформы ля разработки мобильного нативного клиентского приложения для портальных решений телеком-операторов»
Авторы: М. Д. АНДРЕЕВ, Н. Е. ПОСОБИЛОВ
**Содержание статьи:**

Статья, авторами которой являются М. Д. Андреев и Н. Е. Пособилов, посвящена проблеме выбора платформы для разработки мобильного нативного клиентского приложения для портальных решений телеком-операторов. В работе проводится сравнение производительности типичных компонентов приложений ReactNativeApp и iOSApp. По результатам сравнения авторы делают вывод о преимуществе использования фреймворка React Native для разработки такого типа приложений.

**Критерии сравнения и оценки фреймворков:**

1. **Нагрузка на процессор** - измеряется в фреймах/секунду, сравнивается нагрузка на центральный процессор при использовании тестируемых экранов приложения.

2. **Нагрузка на графический процессор** - также измеряется в фреймах/секунду, сравнивается нагрузка на графический процессор при использовании тестируемых экранов приложения.

3. **Нагрузка на оперативную память** - измеряется в фреймах/секунду, сравнивается нагрузка на оперативную память при использовании тестируемых экранов приложения.

**Оценка списка критериев:**

Список критериев представляет собой базовый набор параметров, которые важны при оценке производительности мобильных приложений. Однако, он может быть расширен для более глубокого анализа. Например, можно добавить критерии, такие как время отклика приложения, энергоэффективность (количество энергии, потребляемое приложением), удобство и простота использования API фреймворка, поддержка различных мобильных платформ и т.д. Кроме того, важно учитывать не только технические характеристики, но и бизнес-требования, такие как стоимость разработки и поддержки приложения, время разработки и т.д.
--------------------------------------------------------------------------------------------------
2.1.11 Анализ статьи «Выбор и обоснование использования современных средств для разработки мультиплатформенных мобильных приложений»
**Содержание статьи:**

Статья "IONIC FRAMEWORK В РАЗРАБОТКЕ ГИБРИДНЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ" А.Н. Аблякимовой и А.Н. Абдуллаева посвящена анализу преимуществ и недостатков фреймворка Ionic для разработки гибридных мобильных приложений. Авторы рассматривают Ionic как SDK, используемый для создания веб-приложений, которые можно запустить как мобильное приложение на различных платформах. В статье приведены основные характеристики и функциональные возможности Ionic, а также его преимущества и недостатки.

**Критерии сравнения и оценки фреймворков:**

1. **Скорость разработки:** Эффективность фреймворка в контексте времени, необходимого для создания приложения.

2. **Простота отладки:** Насколько удобно использовать фреймворк для исправления ошибок и улучшения производительности приложения.

3. **Открытый исходный код:** Наличие доступа к исходному коду фреймворка, что позволяет разработчикам модифицировать и улучшать его.

4. **Возможность прототипирования:** Насколько легко и быстро можно создать рабочий прототип приложения с использованием фреймворка.

5. **Производительность приложений:** Сравнение производительности приложений, созданных с использованием различных фреймворков.

6. **Проблемы с безопасностью:** Оценка уровня безопасности, который обеспечивает фреймворк.

7. **Ограниченная нативная функциональность:** Оценка возможностей фреймворка в контексте использования нативных функций устройства.

**Оценка списка критериев:**

Список критериев в целом является достаточно полным и покрывает большинство ключевых аспектов, которые важны при выборе фреймворка для разработки мобильных приложений. Однако, возможно, стоит добавить критерии, связанные с поддержкой и сообществом разработчиков (насколько активно развивается фреймворк, насколько большое и активное у него сообщество), а также учесть специ

**Содержание статьи:**

Статья "IONIC FRAMEWORK В РАЗРАБОТКЕ ГИБРИДНЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ" А.Н. Аблякимовой и А.Н. Абдуллаева посвящена анализу преимуществ и недостатков фреймворка Ionic для разработки гибридных мобильных приложений. Авторы рассматривают Ionic как SDK, используемый для создания веб-приложений, которые можно запустить как мобильное приложение на различных платформах. В статье приведены основные характеристики и функциональные возможности Ionic, а также его преимущества и недостатки.
