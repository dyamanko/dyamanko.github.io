                                  Современные тенденции развития и перспективы внедрения
                       инновационных технологий в машиностроении, образовании и экономике




              Рисунок 8 – дерево рекурсивных вызовов для тестовых данных

       Время работы
       Ожидаемая сложность алгоритма в лучшем случае составляет О(n*log(n)), это когда
номер наиболее удаленной точки всегда оказывается лексикографически центральным. Од-
нако, в худшем случае сложность алгоритма составляет O(n^2). Это достигается, например, в
случае, если номер наиболее удаленной точки всегда соседний к номеру граничной точки [1].
       Литература
       1.      Будяков В.В., Рыбалко К.К., Долженко А.М. Сравнительный анализ техноло-
гий построения виртуальных миров // Современные тенденции развития и перспективы
внедрения инновационных технологий в машиностроении, образовании и экономике. 2016.
Т. 2. № 1. С. 285-291.
       2.      Долженко А.М., Костыркин А.В., Анохин Д.В. Применение карт Google в при-
кладных программах // Современные тенденции развития и перспективы внедрения иннова-
ционных технологий в машиностроении, образовании и экономике. 2016. № 1. С. 181-183.
       3.      Келлер А.В., Захарова Е.В. Задача оптимального измерения с учетом резонан-
сов: алгоритм программы и вычислительный эксперимент // Вестник Южно-Уральского гос-
ударственного университета. Серия: Математическое моделирование и программирование.
2012. № 27. С. 58-65.
       4.      Новик Н.В. Информационные технологии как средство повышения эффектив-
ности профессиональной подготовки инженера (на материалах дисциплины «Инженерная
графика») // Общество: социология, психология, педагогика. 2016. № 8. С. 88-90.
       5.      Фоменко А.Е., Чурсин А.И. Управление территориями при помощи геоинфор-
мационных технологий // Международный журнал прикладных и фундаментальных иссле-
дований. 2015. № 5-1. С. 80-82.



УДК 004.42 : 004.896
  МОБИЛЬНЫЕ СРЕДЫ ВЕБ-РАЗРАБОТКИ ДЛЯ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ

             Сорока Антон Сергеевич, Завадская Татьяна Владимировна
                  Донецкий национальный технический университет,
                      г. Донецк, Донецкая народная республика


                                         - 163 -
Технологический институт (филиал) ДГТУ в г. Азове,
VI Международная научно-практическая конференция, 13-14 мая 2019 г.

       Аннотация
       Статья посвящена рассмотрению современных мобильных сред web-приложений.
Проведен их сравнительный анализ с точки зрения применения для реализации конкретных
задач. Выбранная технология или набор технологий должны обеспечить выполнение по-
ставленной перед разработчиком задачи с максимальной эффективностью.
       Ключевые слова: React Native, Android, кроссплатформенность, Cordova, нативные
приложения.


         MOBILE WEB DEVELOPMENT ENVIRONMENTS FOR MOBILE APPS

                 Soroka Anton Sergeevich, Zavadskaya Tatyana Vladimirovna
                        Donetsk National Technical University, Donetsk,
                                 Donetsk People's Republic

         Abstract
         The article is devoted to the consideration of modern mobile web-application environments.
Their comparative analysis from the point of view of application for realization of concrete tasks is
carried out. The chosen technology or set of technologies should ensure the fulfillment of the task
set for the developer with maximum efficiency.
         Keywords: React Native, Android, cross-platform, Cordova, native applications.

       Введение
       Каждый пользователь имеет свое собственное мобильное устройство и организации,
занимающиеся разработкой программного обеспечения для мобильных устройств, понима-
ют, что большую часть свободного времени люди используют их. Исходя из этого создаются
различные приложения, что приводит к росту потребности мобильных сред разработки. В
связи с этим можно наблюдать появление множества платформ для web-разработки, из-за
чего разработчику трудно остановить свой выбор на конкретной платформе.
       Постановка проблемы
       Существует множество сред для разработки, но самые востребованные из них – это
те, которые компилируются в JavaScript (JS). Большую популярность они приобрели из-за
низкого порога вхождения, наличия кроссплатформенности, возможности использования
web-элементов, нативности. Примерами могут служить следующие среды разработки: React
Native, Apache Cordova (ранее PhoneGap). Проблемой является выбор одной или нескольких
сред разработки, обеспечивающих наиболее эффективное решение поставленной перед раз-
работчиками задачи.
       Нативные приложения, кроссплатформенность
       Рассматриваемые среды, согласно документации, дают возможность разработки на-
тивных и кроссплатформенных приложений. Нативные приложения — это прикладные про-
граммы, которые были разработаны для использования на определѐнной платформе или на
определѐнном устройстве. Одно из преимуществ нативных приложений — то, что они опти-
мизированы под конкретные операционные системы, поэтому они могут работать корректно
и быстро. Кроссплатформенность — способность программного обеспечения работать с
двумя и более аппаратными платформами и (или) операционными системами (ОС). Это
обеспечивается благодаря использованию высокоуровневых языков программирования, сред
разработки и выполнения, поддерживающих условную компиляцию, компоновку и выпол-
нение кода для различных платформ.
       Из этого следует, что разработанное приложение может верно функционировать на
нескольких ОС, которые можно будет разместить в Play маркете или App Store. Ключевой
составляющей таких приложений является то, что ресурсы приложения используют натив-

                                               - 164 -
                                   Современные тенденции развития и перспективы внедрения
                        инновационных технологий в машиностроении, образовании и экономике

ный компонент и выполняются в WebView. Данный способ позволяет устанавливать связь со
всеми доступными элементами устройства: камера, акселерометр, динамики, кнопки, мик-
рофон и т.д. Возможности таких приложений ограничены только скоростью обработки рен-
дера. Остановимся конкретней на выбранных средах разработки.
       React Native
       React Native разработана для создания нативно отображаемых iOS и Android-
приложений. В его основе лежит разработанная в Facebook JS-библиотека React, предназна-
ченная для создания пользовательских интерфейсов. Данный фреймворк ориентирован не на
браузер, а на мобильные платформы. При разработке приложения можно использовать React
Native для написания чистых, быстрых мобильных приложений, используя привычную JS-
библиотеку React и единой кодовой базой JavaScript. Прежде чем рассматривать детально
React Native, определим, что такое React.
       React — это JS-библиотека для создания пользовательских интерфейсов, для веб-
приложений. React широко распространен, и в отличие от более крупных MVC-фреймворков
решает относительно узкую задачу: рендеринг интерфейса. React может использоваться для
разработки одностраничных и мобильных приложений. Его цель — предоставить высокую
скорость, простоту и масштабируемость. В качестве библиотеки для разработки пользова-
тельских интерфейсов React часто используется с другими библиотеками, такими как Redux.
       В React компонент описывает собственное отображение, а затем библиотека обраба-
тывает рендеринг. В случае, если нужно отрисовать компоненты для web, то React использу-
ет стандартные HTML-тэги. Благодаря тому же уровню абстракции — для рендеринга в iOS
и Android React Native вызывает соответствующие Application Programming Interface (API). В
iOS компоненты отрисовываются в UI-виды, а в Android — в нативные виды. У React Native
есть ряд отличий:
             стандартный div заменяется View;
             тег img заменяет Image;
             доступны спец-теги для различных платформ.
       React Native запускает приложение с помощью JS-движка хост-платформы, без бло-
кирования основного UI-потока. В итоге разработчик получает преимущества нативной про-
изводительности, анимации и поведения без необходимости писать на Objective-C или Java.
Другие методы разработки кроссплатформенных приложений, вроде Cordova или Titanium,
никогда не достигнут такого уровня нативной производительности или отображения.
       Для написания кода используется JSX (пример на рис.1), который похож на стандарт-
ный HTML, CSS, JavaScript. В отличие от стандартной разработки под iOS и Android, React
Native имеет больше преимуществ, т.к. приложение в основном состоит из JavaScript. Разра-
ботчик может пользоваться многочисленными достоинствами web-разработки. Например,
чтобы увидеть внесѐнные в код изменения, можно мгновенно «обновить» приложение вме-
сто длительного ожидания завершения традиционного ребилда.
       Большинство API во фреймворке — кроссплатформенные, так что достаточно напи-
сать компонент React Native, и он будет работать в iOS и Android. React Native позволяет
назначать платформозависимые версии каждого компонента, которые можно потом интегри-
ровать в своѐ приложение.
       У React Native есть свои недостатки: относительно новый проект, которому свой-
ственны проблемы новых библиотек; отсутствуют некоторые функции; не выработаны оп-
тимальные методики использования; от релиза к релизу внедряются серьѐзные изменения,
которые не всегда влияют на работу положительно.
       Из преимуществ можно выделить следующие: возможность использования единой
кодовой базы под iOS и Android; низкий порог вхождения; быстрый цикл разработки; воз-


                                          - 165 -
Технологический институт (филиал) ДГТУ в г. Азове,
VI Международная научно-практическая конференция, 13-14 мая 2019 г.

можность получения API с собственного сайта; отсутствие свойственных фреймворку огра-
ничений.




                                Рисунок 1 – Пример JSX кода

       Подводя итог, React Native обеспечивает высококачественную кроссплатформенную
мобильную разработку, но не подходит для разработки крупных игровых приложений.
       Apache Cordova
       Apache Cordova — это платформа разработки мобильных приложений с открытым ис-
ходным кодом. Она позволяет использовать стандартные веб-технологии, такие как HTML5,
CSS3 и JavaScript для кросс платформенной разработки, избегая встроенного языка разра-
ботки для каждой из мобильных платформ. Приложения выполняются внутри компонента
нацеленною на каждую платформу и используют стандартные API для доступа к датчикам
устройства, данным и состоянию сети.
       Приложение реализовано как веб-страница, где по умолчанию главным файлом явля-
ется index.html, который ссылается на CSS, JS, изображения, файлы мультимедиа или другие
ресурсы, необходиме для его запуска. Выполняется это все как WebView в пределах оболоч-
ки приложения, которая будет доступны в магазины приложений.
       WebView с поддержкой Cordova может представлять приложения и его пользователь-
ский интерфейс. Поддерживаются следующие платформы: Android; iOS; WP8; Windows; Ub-
untu; Blackberry 10.
       В работе с некоторыми платформами Cordova может выступать в качестве компонен-
та в больших, гибридных приложениях, которые объединяются в WebView с другими ком-
понентами приложения.
       Интерфейс плагина доступен для Cordova и других компонентов, для повторного ис-
пользования кода. Это позволяет вызывать код на языке платформы из JavaScript. На не-
скольких платформах устройств согласуются JS API, чтобы этот машинный код скомпили-
ровать. Сторонние плагины предоставляют дополнительные привязки для функции, которые
могут не выполняться на всех платформах. Можно найти эти аналоги таких плагинов в ре-
естре и использовать их в своем приложении. На рис. 2 представлен пример реализации
разметки и кода в данной среде.
       Cordova не предоставляет каких-либо виджетов для пользовательского интерфейса
или MV-фреймворков. Если нужно использовать UI-виджеты и/или MV-фреймворк, то необ-
ходимо выбрать их и включать в приложение самостоятельно, как ресурсы третьей стороны.
Как и у любой среды у Cordova есть свои достоинства и недостатки. Из достоинств можно
выделить следующие: простата изучения; доступ к нативному функционалу (камера, дина-
мики, кнопки и т.д.); простое API; возможность использования JavaScript библиотек.




                                            - 166 -
                                           Современные тенденции развития и перспективы внедрения
                                инновационных технологий в машиностроении, образовании и экономике




                                     Рисунок 2 – Пример кода и разметки

       Также имеется следующие недостатки: плохая документация; низкая происзводитель-
ность по сравнению с другими нативными приложениями; отсутствие готовых элементов
пользовательского интерфейса; большое количество использования плагинов.
       Данный фреймворк может подойти для разработки небыстрых приложений, которые
работают с небольшим объемом данных, но при этом нужна большая кроссплатформенность
и быстрота создания приложения.
       Выводы
       Технологии web-разработок развиваются очень быстро, поэтому не стоит останавли-
ваться на одном способе разработки. Во многих случаях есть возможность комбинирования
нескольких способов создания приложения. Например, Cordova может использовать биб-
лиотеку React, но такой способ может влиять на производительность. Пока в мире IT инду-
стрии нет определенных стандартов, и предписаний, указывающих какую технологию ис-
пользовать, следует выбирать технологию, которая индивидуально подойдет к проекту. Вы-
бранная технология должна позволять выполнить поставленную перед разработчиком задачу
с максимальной эффективностью.



УДК 004.738.2
                      MIMO ‫تأثير االرتباط انمكاني وعذد اختيار انهىائياث عهى سعت قناة‬
   (Influence of spatial correlation and antenna selection number on the channel of capacity
                                             MIMO)

                                                     Al Taher I.A.
   Department of Electronics, radio engineering and communication systems, Don State Technical
                                     University, Shakhty, Russian Federation
                                                                                         )Abstract) ‫انخالصت‬
‫ٓ عؼت‬١‫ حسغ‬ٍٝ‫) حؼًّ ػ‬MIMO( ‫ ِخؼذدة االخشاج‬-‫ لٕبة ِخؼذدة االدخبي‬ٟ‫ ف‬ٟ‫ائ‬ٌٛٙ‫بس ا‬١‫مت اخخ‬٠‫ ٘زا اٌبسث ٔمخشذ غش‬ٟ‫ف‬
ٖ‫ّىٓ اعخخذاَ ٘ز‬٠ ‫وزٌه‬ٚ .‫ االسعبي‬ٟ‫ ف‬ٟ‫ائ‬ٛ٘ ً‫بس أفع‬١‫ب ِٓ خالي اخخ‬ٙ١ٍ‫ي ػ‬ٛ‫خُ اٌسص‬٠ ٟ‫ اٌخ‬، ‫بث اإلسعبي اٌّخؼذدة‬١‫ائ‬ٛ٘ ‫لٕبة‬
‫ت‬١ٌ‫ وفبءة غبلت ػب‬ٍٝ‫ي ػ‬ٛ‫ ٌٍسص‬، ‫بث‬١‫ائ‬ٌٛٙ‫ ا‬ٟ‫( ف‬Radio Frequency) RFٞٛ٠‫ اٌخشدد اٌشاد‬ٟ‫ٍىت ف‬ٙ‫ً اٌطبلت اٌّغخ‬١ٍ‫مت ٌخم‬٠‫اٌطش‬
‫ عؼت‬ٍٝ‫ )) ػ‬spatial correlation‫ت‬١ٔ‫ش لٕبة االسحببغ اٌّىب‬١‫وزٌه دساعت حأث‬ٚ, (MIMO( ‫ِت‬ٛ‫ عؼت لٕبة ٌٍّٕظ‬ٝ‫ك ألص‬١‫ٌخسم‬
‫ت‬١ٌ‫ازخّب‬ٚ )Signal to Noise Ratio( SNR‫ظبء‬ٛ‫ اٌع‬ٌٝ‫شث إٌخبئح أْ ٔغبت اإلشبسة إ‬ٙ‫ أظ‬، ‫ ٘زا اٌبسث‬ٟ‫ ف‬.‫االسعبي اٌّخؼذدة‬
ًِ‫بدة ِؼب‬٠‫وزٌه ص‬ٚ، )3-81( ٟ٘ (dB) ً١‫غب‬٠‫) د‬88( ٞٚ‫ حغب‬SNR ‫) ػٕذ‬Bit Error Rate( BER‫ ػذد اٌبخبث‬ٟ‫اٌخطأ ف‬
‫ْ ٔغبت اإلشبسة‬ٛ‫ ػٕذِب حى‬، ‫االعخمببي‬ٚ ‫ٓ االسعبي‬١‫ ب‬ٟ‫ائ‬ٌٛٙ‫ ػٕبصش ا‬ٟ‫ً عؼت اٌمٕبة بغبب اٌخغبئش ف‬١ٍ‫ حم‬ٌٝ‫ ا‬ٞ‫ت حؤد‬١ٔ‫االسحببغ اٌّىب‬
                                                              .‫بث االعخمببي‬١‫ائ‬ٛ٘ ٓ١‫( ب‬dB) ً١‫غب‬٠‫) د‬88( ٟ٘ ‫ظبء‬ٛ‫ اٌع‬ٌٝ‫إ‬

                                                         - 167 -
