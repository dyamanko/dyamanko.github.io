2.1.8 Анализ статьи «ОБЗОР ПОДХОДОВ К СОЗДАНИЮ КРОССПЛАТФОРМЕННЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ С ПРИМЕНЕНИЕМ ВЕБ-ТЕХНОЛОГИЙ»
Название: «ОБЗОР ПОДХОДОВ К СОЗДАНИЮ КРОССПЛАТФОРМЕННЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИЙ С ПРИМЕНЕНИЕМ ВЕБ-ТЕХНОЛОГИЙ »
Авторы: Д. В. СИРОМСКИЙ 
**Содержание статьи:**

Статья Д.В. Сиромского представляет обзор подходов к созданию кроссплатформенных мобильных приложений с использованием веб-технологий. Автор рассматривает особенности и сравнивает такие технологии, как Apache Cordova, React Native, NativeScript и Progressive Web Application (PWA). 

Критерии сравнения и оценки фреймворков:

1. Доступ к функциям устройства: Определяет, предоставляет ли фреймворк доступ к функциям устройства.
2. Поддержка плагинов: Указывает, поддерживает ли фреймворк плагины.
3. Сложность адаптации под разные устройства: Оценивает, насколько легко адаптировать приложение под разные устройства с использованием данного фреймворка.
4. Разметка на собственных компонентах: Оценивает, использует ли фреймворк собственные компоненты для разметки.
5. Поддержка TypeScript: Указывает, поддерживает ли фреймворк TypeScript.
6. Поддержка SEO: Оценивает, поддерживает ли фреймворк SEO.
7. Вес исполняемого файла: Оценивает, какой вес имеет исполняемый файл приложения, созданного с использованием данного фреймворка.

Оценка списка критериев:

Список критериев, представленных в статье, является достаточно полным и покрывает большую часть важных аспектов при выборе фреймворка для разработки мобильных приложений. Однако, он может быть дополнен следующими критериями:

1. Производительность: Как быстро работает приложение, созданное с использованием данного фреймворка.
2. Сообщество и поддержка: Насколько активно сообщество разработчиков и насколько хорошо поддерживается фреймворк.
3. Обучение и документация: Насколько хорошо документирован фреймворк и насколько легко его изучить.

Недостатками текущего списка являются отсутствие учета производительности, поддержки сообщества и качества документации. Эти критерии могут быть важными при выборе фреймворка для разработки мобильных приложений.
--------------------------------------------------------------------------------------------------
2.1.9 Анализ статьи «СОЗДАНИЕ МОБИЛЬНОГО ПРИЛОЖЕНИЯ НА ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JAVASCRIPT (REACT NATIVE) »
Название: «СОЗДАНИЕ МОБИЛЬНОГО ПРИЛОЖЕНИЯ НА ЯЗЫКЕ ПРОГРАММИРОВАНИЯ JAVASCRIPT (REACT NATIVE) »
Авторы: В. Г. ВИНОГРАДСКИЙ, А. В. ВИНОКУРОВ
**Содержание статьи:**

Статья представляет собой сравнительный анализ трех популярных JavaScript-фреймворков для разработки мобильных приложений: React Native, Ionic и NativeScript. Авторы исследуют каждый из этих фреймворков, оценивая их по ряду критериев, чтобы определить их преимущества и недостатки. 

**Критерии сравнения:**

1. **Производительность:** Оценка скорости и эффективности работы приложений, созданных с использованием каждого фреймворка.

2. **Поддержка платформ:** Оценка того, насколько хорошо фреймворк поддерживает различные мобильные платформы, такие как Android и iOS.

3. **Сообщество и поддержка:** Оценка размера и активности сообщества разработчиков, а также доступности и качества документации и ресурсов поддержки.

4. **Удобство использования:** Оценка того, насколько просто и удобно использовать фреймворк для разработки приложений.

5. **Гибкость и масштабируемость:** Оценка того, насколько легко можно настроить и масштабировать приложения, созданные с использованием каждого фреймворка.

**Оценка списка критериев:**

Список критериев, представленный в статье, представляет собой хорошую отправную точку для сравнения JavaScript-фреймворков для разработки мобильных приложений. Однако, он может быть дополнен и уточнен. 

Во-первых, критерий "производительность" может быть разделен на подкритерии, такие как время загрузки приложения, скорость отклика на пользовательские действия и потребление ресурсов (CPU, память).

Во-вторых, критерий "поддержка платформ" может быть расширен, чтобы включать в себя не только поддержку Android и iOS, но и других платформ, таких как Windows и web.

В-третьих, может быть добавлен критерий "стоимость разработки", который оценивает время и ресурсы, необходимые для разработки приложения с использованием каждого фреймворка.

Наконец, критерий "гибкость и масштабируемость" может быть уточнен, чтобы оценивать способность фреймворка поддерж

ивать изменения в требованиях и рост приложения.

В целом, хотя список критериев в статье является полезным, он может быть улучшен путем добавления большей детализации и учета дополнительных аспектов разработки мобильных приложений.
--------------------------------------------------------------------------------------------------
2.1.10 Анализ статьи «Выбор платформы ля разработки мобильного нативного клиентского приложения для портальных решений телеком-операторов»
Название: «Выбор платформы ля разработки мобильного нативного клиентского приложения для портальных решений телеком-операторов»
Авторы: М. Д. АНДРЕЕВ, Н. Е. ПОСОБИЛОВ
**Содержание статьи:**

Статья, авторами которой являются М. Д. Андреев и Н. Е. Пособилов, посвящена проблеме выбора платформы для разработки мобильного нативного клиентского приложения для портальных решений телеком-операторов. В работе проводится сравнение производительности типичных компонентов приложений ReactNativeApp и iOSApp. По результатам сравнения авторы делают вывод о преимуществе использования фреймворка React Native для разработки такого типа приложений.

**Критерии сравнения и оценки фреймворков:**

1. **Нагрузка на процессор** - измеряется в фреймах/секунду, сравнивается нагрузка на центральный процессор при использовании тестируемых экранов приложения.

2. **Нагрузка на графический процессор** - также измеряется в фреймах/секунду, сравнивается нагрузка на графический процессор при использовании тестируемых экранов приложения.

3. **Нагрузка на оперативную память** - измеряется в фреймах/секунду, сравнивается нагрузка на оперативную память при использовании тестируемых экранов приложения.

**Оценка списка критериев:**

Список критериев представляет собой базовый набор параметров, которые важны при оценке производительности мобильных приложений. Однако, он может быть расширен для более глубокого анализа. Например, можно добавить критерии, такие как время отклика приложения, энергоэффективность (количество энергии, потребляемое приложением), удобство и простота использования API фреймворка, поддержка различных мобильных платформ и т.д. Кроме того, важно учитывать не только технические характеристики, но и бизнес-требования, такие как стоимость разработки и поддержки приложения, время разработки и т.д.